CBSS search begin!
### nid is: 1
bigM set to  2240.0
### self.root_seq_dict[nid] is: <id:1,I:set(),O:set(),sol:{0: [983, 955], 17: [722, 531], 4: [289, 390, 401], 10: [297, 235], 9: [449, 580, 644], 12: [288, 97, 4, 15, 208, 183, 121], 11: [674, 707, 771], 14: [378, 309], 1: [1003, 940, 747, 751, 877], 3: [965, 1001], 13: [391, 459, 465], 6: [642, 678], 2: [136, 137], 16: [385, 400], 15: [889, 765], 19: [22, 86, 55, 28, 93, 222, 479, 379], 5: [1014, 766], 8: [371, 467], 18: [673, 608], 7: [950, 822, 729, 733]},cost:254.0,cdict:{0: 5.0, 17: 9.0, 4: 21.0, 10: 4.0, 9: 9.0, 12: 47.0, 11: 4.0, 14: 7.0, 1: 24.0, 3: 5.0, 13: 14.0, 6: 5.0, 2: 1.0, 16: 19.0, 15: 8.0, 19: 36.0, 5: 16.0, 8: 3.0, 18: 3.0, 7: 14.0}>
### cstr {i:-1,va:-1,vb:-1,ta:-1,tb:-1,j:-1,flag:-1}
new cost is: 254
### curr_nid:1, curr_cost:254.000000
### eps_cost: 254.0
CBSS loop over cstr: {i:4,va:400,vb:400,ta:20,tb:20,j:16,flag:1}
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  2
CBSS loop over cstr: {i:16,va:400,vb:400,ta:20,tb:20,j:4,flag:1}
### CBGS add node into OPEN,,, nn_cost =  256 , nid =  3
### curr_nid:2, curr_cost:254.000000
### eps_cost: 254.0
CBSS loop over cstr: {i:5,va:765,vb:765,ta:15,tb:15,j:15,flag:1}
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  4
CBSS loop over cstr: {i:15,va:765,vb:765,ta:15,tb:15,j:5,flag:1}
### CBGS add node into OPEN,,, nn_cost =  262 , nid =  5
### curr_nid:4, curr_cost:254.000000
### eps_cost: 254.0
! CBSS succeed !
{'path_set': {0: [[23, 24, 24, 25, 26, 27, 27], [30, 30, 29, 29, 29, 29, 29], [0, 1, 2, 3, 4, 5, inf]], 1: [[11, 12, 13, 13, 13, 12, 12, 12, 11, 11, 11, 11, 11, 12, 12, 13, 14, 14, 15, 14, 14, 13, 13, 13, 13, 13], [31, 31, 31, 30, 29, 29, 28, 27, 27, 26, 25, 24, 23, 23, 24, 24, 24, 23, 23, 23, 24, 24, 25, 26, 27, 27], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, inf]], 2: [[8, 9, 9], [4, 4, 4], [0, 1, inf]], 3: [[5, 5, 6, 7, 8, 9, 9], [30, 31, 31, 31, 31, 31, 31], [0, 1, 2, 3, 4, 5, inf]], 4: [[1, 1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17], [9, 10, 11, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, inf]], 5: [[22, 22, 22, 22, 22, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30, 30, 30], [31, 30, 29, 28, 27, 26, 26, 26, 26, 26, 26, 26, 26, 25, 24, 24, 23, 23], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, inf]], 6: [[2, 2, 3, 4, 5, 6, 6], [20, 21, 21, 21, 21, 21, 21], [0, 1, 2, 3, 4, 5, inf]], 7: [[22, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 28, 29, 29], [29, 28, 27, 26, 25, 25, 25, 24, 24, 23, 22, 22, 22, 22, 22, 22], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, inf]], 8: [[19, 19, 19, 19, 19], [11, 12, 13, 14, 14], [0, 1, 2, 3, inf]], 9: [[1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4], [14, 14, 15, 15, 15, 16, 17, 18, 19, 20, 20], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, inf]], 10: [[9, 9, 9, 10, 11, 11], [9, 8, 7, 7, 7, 7], [0, 1, 2, 3, 4, inf]], 11: [[2, 3, 3, 3, 3, 3], [21, 21, 22, 23, 24, 24], [0, 1, 2, 3, 4, inf]], 12: [[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 23, 23, 23, 24, 25, 25], [9, 8, 7, 6, 5, 4, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 4, 3, 3, 3, 3], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, inf]], 13: [[7, 7, 8, 9, 10, 11, 11, 12, 12, 13, 14, 15, 16, 17, 17, 17], [12, 13, 13, 13, 13, 13, 14, 14, 13, 13, 13, 13, 13, 13, 14, 14], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, inf]], 14: [[26, 25, 24, 23, 23, 23, 22, 21, 21], [11, 11, 11, 11, 10, 9, 9, 9, 9], [0, 1, 2, 3, 4, 5, 6, 7, inf]], 15: [[25, 25, 26, 27, 28, 29, 29, 29, 29, 29], [27, 26, 26, 26, 26, 26, 25, 24, 23, 23], [0, 1, 2, 3, 4, 5, 6, 7, 8, inf]], 16: [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 16, 16], [12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, 13, 13, 13, 13, 12, 12], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, inf]], 17: [[18, 17, 17, 17, 17, 17, 17, 17, 18, 19, 19], [22, 22, 21, 20, 19, 18, 17, 16, 16, 16, 16], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, inf]], 18: [[1, 0, 0, 0, 0], [21, 21, 20, 19, 19], [0, 1, 2, 3, inf]], 19: [[22, 22, 22, 22, 23, 24, 24, 25, 26, 27, 28, 29, 29, 29, 30, 30, 30, 29, 29, 29, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 30, 29, 28, 27, 27, 27, 27, 27], [0, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 14, 14, 13, 12, 11, 11], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, inf]]}, 'conflict_set': [{'type': 1, 'i': 4, 'j': 16, 'vb': 400, 't_lb': 19}, {'type': 1, 'i': 5, 'j': 15, 'vb': 765, 't_lb': 14}], 'err_cstr': 2, 'round': 3, 'best_g_value': 254.0, 'open_list_size': 2, 'num_low_level_expanded': 740, 'search_success': 1, 'search_time': 2.116373931000453, 'n_tsp_call': 1, 'n_tsp_time': 0.7685173400004714, 'n_roots': 1}
------run_CBGS_MSMP_Benchmark------
CBGS search begin!
bigM set to  2240.0
### root_num 1
### self.root_seq_dict[self.nodes[nid].root_num] is: <id:1,I:set(),O:set(),sol:{0: [983, 955], 17: [722, 531], 4: [289, 390, 401], 10: [297, 235], 9: [449, 580, 644], 12: [288, 97, 4, 15, 208, 183, 121], 11: [674, 707, 771], 14: [378, 309], 1: [1003, 940, 747, 751, 877], 3: [965, 1001], 13: [391, 459, 465], 6: [642, 678], 2: [136, 137], 16: [385, 400], 15: [889, 765], 19: [22, 86, 55, 28, 93, 222, 479, 379], 5: [1014, 766], 8: [371, 467], 18: [673, 608], 7: [950, 822, 729, 733]},cost:254.0,cdict:{0: 5.0, 17: 9.0, 4: 21.0, 10: 4.0, 9: 9.0, 12: 47.0, 11: 4.0, 14: 7.0, 1: 24.0, 3: 5.0, 13: 14.0, 6: 5.0, 2: 1.0, 16: 19.0, 15: 8.0, 19: 36.0, 5: 16.0, 8: 3.0, 18: 3.0, 7: 14.0}>
### cstr {i:-1,va:-1,vb:-1,ta:-1,tb:-1,j:-1,flag:-1}
### nid is: 1, update rep_id is: 0
new cost is: 254
### popped is: (254, 1)
CBGS loop over cstr: {i:4,va:400,vb:400,ta:20,tb:20,j:16,flag:1}
### root, cost_bf = 1, 254.000000
### cost_af =  254
### nid is: 2, update rep_id is: 0
##############
### curr_id:2, curr_cost:254
### eps_cost: 254.0
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  2
CBGS loop over cstr: {i:16,va:400,vb:400,ta:20,tb:20,j:4,flag:1}
### root, cost_bf = 1, 254.000000
### cost_af =  256
### nid is: 3, update rep_id is: 0
##############
### curr_id:3, curr_cost:256
### eps_cost: 254.0
### expanded
 ### CBGS _GenNewRoot...
### root_num 2
### self.root_seq_dict[self.nodes[nid].root_num] is: <id:2,I:set(),O:{(983, 955, 0)},sol:{0: [983, 766], 6: [642, 608], 13: [391, 459, 465], 9: [449, 580, 644], 18: [673, 678], 15: [889, 765], 12: [288, 97, 4, 15, 208, 309], 1: [1003, 940, 747, 877], 10: [297, 400], 11: [674, 707, 771], 8: [371, 467], 17: [722, 751, 531], 7: [950, 822, 729, 733], 4: [289, 235], 14: [378, 183, 121], 2: [136, 137], 5: [1014, 955], 3: [965, 1001], 16: [385, 390, 401], 19: [22, 86, 55, 28, 93, 222, 479, 379]},cost:254.0,cdict:{0: 14.0, 6: 3.0, 13: 14.0, 9: 9.0, 18: 5.0, 15: 8.0, 12: 41.0, 1: 18.0, 10: 10.0, 11: 4.0, 8: 3.0, 17: 15.0, 7: 14.0, 4: 14.0, 14: 13.0, 2: 1.0, 5: 7.0, 3: 5.0, 16: 20.0, 19: 36.0}>
### cstr {i:16,va:400,vb:400,ta:20,tb:20,j:4,flag:1}
### nid is: 3, update rep_id is: 1
new cost is: 254
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  3
### popped is: (254, 2)
CBGS loop over cstr: {i:5,va:765,vb:765,ta:15,tb:15,j:15,flag:1}
### root, cost_bf = 1, 254.000000
### cost_af =  254
### nid is: 4, update rep_id is: 0
##############
### curr_id:4, curr_cost:254
### eps_cost: 254.0
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  4
CBGS loop over cstr: {i:15,va:765,vb:765,ta:15,tb:15,j:5,flag:1}
### root, cost_bf = 1, 254.000000
### cost_af =  262
### nid is: 5, update rep_id is: 0
##############
### curr_id:5, curr_cost:262
### eps_cost: 254.0
curr_node.root_num: 1, len(self.root_seq_dict): 2
### caching used
 ### CBGS _GenNewRoot...
### root_num 2
### self.root_seq_dict[self.nodes[nid].root_num] is: <id:2,I:set(),O:{(983, 955, 0)},sol:{0: [983, 766], 6: [642, 608], 13: [391, 459, 465], 9: [449, 580, 644], 18: [673, 678], 15: [889, 765], 12: [288, 97, 4, 15, 208, 309], 1: [1003, 940, 747, 877], 10: [297, 400], 11: [674, 707, 771], 8: [371, 467], 17: [722, 751, 531], 7: [950, 822, 729, 733], 4: [289, 235], 14: [378, 183, 121], 2: [136, 137], 5: [1014, 955], 3: [965, 1001], 16: [385, 390, 401], 19: [22, 86, 55, 28, 93, 222, 479, 379]},cost:254.0,cdict:{0: 14.0, 6: 3.0, 13: 14.0, 9: 9.0, 18: 5.0, 15: 8.0, 12: 41.0, 1: 18.0, 10: 10.0, 11: 4.0, 8: 3.0, 17: 15.0, 7: 14.0, 4: 14.0, 14: 13.0, 2: 1.0, 5: 7.0, 3: 5.0, 16: 20.0, 19: 36.0}>
### cstr {i:15,va:765,vb:765,ta:15,tb:15,j:5,flag:1}
### nid is: 5, update rep_id is: 0
new cost is: 262
### CBGS add node into OPEN,,, nn_cost =  262 , nid =  5
### popped is: (254, 3)
CBGS loop over cstr: {i:0,va:765,vb:765,ta:13,tb:13,j:15,flag:1}
### root, cost_bf = 2, 254.000000
### cost_af =  254
### nid is: 6, update rep_id is: 1
### root, cost_bf = 1, 256.000000
##############
### curr_id:6, curr_cost:254
### eps_cost: 254.0
### CBGS add node into OPEN,,, nn_cost =  254 , nid =  6
CBGS loop over cstr: {i:15,va:765,vb:765,ta:13,tb:13,j:0,flag:1}
### root, cost_bf = 2, 254.000000
### cost_af =  260
### nid is: 7, update rep_id is: 0
### root, cost_bf = 1, 256.000000
### cost_af =  262
### nid is: 7, update rep_id is: 1
##############
### curr_id:7, curr_cost:260
### eps_cost: 254.0
### expanded

